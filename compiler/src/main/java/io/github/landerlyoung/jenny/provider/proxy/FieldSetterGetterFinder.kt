/**
 * Copyright (C) 2024 The Qt Company Ltd.
 * Copyright 2016 landerlyoung@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.github.landerlyoung.jenny.provider.proxy

import io.github.landerlyoung.jenny.element.JennyElement
import io.github.landerlyoung.jenny.element.method.JennyExecutableElement
import io.github.landerlyoung.jenny.utils.isConstant
import io.github.landerlyoung.jenny.utils.toCamelCase
import io.github.landerlyoung.jenny.utils.toJniReturnTypeString
import java.util.*

object FieldSetterGetterFinder {

    fun hasGetterSetter(
        field: JennyElement,
        allMethods: Collection<JennyExecutableElement>,
        generateGetterForFields: Boolean,
        generateSetterForFields: Boolean,
        allFields: Boolean
    ): EnumSet<GetterSetter> {

        if (field.isConstant())
            return EnumSet.noneOf(GetterSetter::class.java)
        if (allFields && !(generateSetterForFields || generateGetterForFields))
            return addAutoGeneratedAccessors(allMethods = allMethods.map { it.name }.toSet(), field)

        val result = EnumSet.noneOf(GetterSetter::class.java)
        if (generateGetterForFields)
            result.add(GetterSetter.GETTER)
        if (generateSetterForFields)
            result.add(GetterSetter.SETTER)
        return result
    }

    private fun addAutoGeneratedAccessors(
        allMethods: Collection<String>,
        field: JennyElement
    ): EnumSet<GetterSetter> {
        val result = EnumSet.noneOf(GetterSetter::class.java)
        val camelCaseName = field.name.toCamelCase()
        val type = field.type.toJniReturnTypeString()
        if (shouldAddGetter(allMethods, camelCaseName, type))
            result.add(GetterSetter.GETTER)
        if (shouldAddSetter(allMethods, camelCaseName))
            result.add(GetterSetter.SETTER)
        return result
    }

    private fun shouldAddGetter(
        allMethods: Collection<String>,
        camelCaseName: String,
        type: String
    ): Boolean {
        return !allMethods.contains("get$camelCaseName") &&
                !(type == "jboolean" && allMethods.contains("is$camelCaseName"))
    }

    private fun shouldAddSetter(allMethods: Collection<String>, camelCaseName: String): Boolean {
        return !allMethods.contains("set$camelCaseName")
    }

    enum class GetterSetter {
        GETTER, SETTER
    }
}